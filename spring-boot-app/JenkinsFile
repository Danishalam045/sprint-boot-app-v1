pipeline {
    agent any

    environment {
        DOCKER_USER = credentials('dockerhub-user')
        DOCKER_IMAGE = "danish045/ultimate-cicd"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Danishalam045/sprint-boot-app-v1.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh '''
                    echo "=== Building with Maven ==="
                    cd spring-boot-app
                    mvn clean install -DskipTests
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                        echo "=== Running SonarQube Analysis ==="
                        cd spring-boot-app
                        mvn sonar:sonar
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-user', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "=== Building Docker Image ==="
                        cd spring-boot-app
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} .
                        docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                sh '''
                    echo "=== Updating deployment.yaml with new image tag ==="
                    sed -i "s#image: .*#image: $DOCKER_IMAGE:${BUILD_NUMBER}#" spring-boot-app-manifests/deployment.yml
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            agent {
                docker {
                    image 'bitnami/kubectl:latest'
                    args '-v /home/jenkins/jenkins-kubeconfig/config:/root/.kube/config:ro --entrypoint="" --user root'
                }
            }
            environment {
                KUBECONFIG = '/root/.kube/config'
            }
            steps {
                sh '''
                    echo "=== Deploying to Kubernetes ==="
                    kubectl apply --validate=false -f spring-boot-app-manifests/deployment.yml
                '''
            }
        }
    }
}

